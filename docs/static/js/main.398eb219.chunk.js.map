{"version":3,"sources":["Components/Form.jsx","Components/List.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setName","nameTouched","setNameTouched","email","setEmail","emailTouched","setEmailTouched","password","setPassword","passwordTouched","setPasswordTouched","isValid","setIsValid","errors","setErrors","useEffect","newErrors","valid","length","test","checkValid","className","onSubmit","e","preventDefault","createUser","type","value","onChange","target","onFocus","disabled","List","users","map","user","i","key","App","setUsers","newUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.398eb219.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Form = (props) => {\n  const [name, setName] = useState(\"\");\n  const [nameTouched, setNameTouched] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [emailTouched, setEmailTouched] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [passwordTouched, setPasswordTouched] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const checkValid = () => {\n    const newErrors = {};\n    let valid = true;\n\n    if(name.length < 1) {\n      newErrors.name = \"Name is required!\"\n      valid = false;\n    } else if(name.length < 2) {\n      newErrors.name = \"Name must be 2 characters or longer\"\n      valid = false;\n    }\n\n    if(email.length < 1) {\n      newErrors.email = \"Email is required!\"\n      valid = false;\n    } else if(!(/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]+)?$/.test(email))){\n      newErrors.email = \"Valid Email is required!\"\n      valid = false;\n    }\n\n    if(password.length < 1) {\n      newErrors.password = \"Password is required!\"\n      valid = false;\n    } else if(password.length < 8) {\n      newErrors.password = \"Password must be 8 characters or longer\"\n      valid = false;\n    }\n\n    setIsValid(valid);\n    setErrors(newErrors);\n\n  }\n\n  useEffect( () => {\n    checkValid();\n  }, [name, email, password]);\n\n  const formSubmit = (e) => {\n    e.preventDefault();\n    props.createUser({name, email, password});\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setNameTouched(false);\n    setEmailTouched(false);\n    setPasswordTouched(false);\n  }\n\n  return (\n    <div className=\"message is-info\">\n      <div className=\"message-header\">\n        <p>Create User</p>\n      </div>\n      <div className=\"message-body\">\n        <form onSubmit={ formSubmit }>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label>Name:</label>\n              <input \n                type=\"text\" \n                className=\"input\" \n                value={ name }\n                onChange={e => setName(e.target.value)}\n                onFocus={e => setNameTouched(true)}\n              />\n              {\n                errors.name && nameTouched ?\n                <p className=\"help is-danger\">{ errors.name }</p>:\n                ''\n              }\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label>Email:</label>\n              <input \n                type=\"text\" \n                className=\"input\" \n                value={ email }\n                onChange={e => setEmail(e.target.value)}\n                onFocus={e => setEmailTouched(true)}\n              />\n              {\n                errors.email && emailTouched ?\n                <p className=\"help is-danger\">{ errors.email }</p>:\n                ''\n              }\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label>Password:</label>\n              <input \n                type=\"password\" \n                className=\"input\" \n                value={ password }\n                onChange={e => setPassword(e.target.value)}\n                onFocus={e => setPasswordTouched(true)}\n              />\n              {\n                errors.password && passwordTouched ?\n                <p className=\"help is-danger\">{ errors.password }</p>:\n                ''\n              }\n            </div>\n          </div>\n          { \n            isValid ? \n            <input type=\"submit\" value=\"Create User\" className=\"button is-info\" /> :\n            <input type=\"submit\" value=\"Create User\" className=\"button is-info\" disabled />\n          }\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Form;","import React from 'react';\n\n\nconst List = (props) => {\n  return (\n    <>\n      {props.users.map( (user, i) => \n        <div className=\"message is-primary\" key={ i }>\n          <div className=\"message-body\">\n            <p>Name: { user.name }</p>\n            <p>Email: { user.email }</p>\n            <p>Password: { user.password }</p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default List;","import React, { useState } from 'react';\nimport 'bulma/css/bulma.min.css';\nimport Form from './Components/Form';\nimport List from './Components/List';\n\n\nfunction App() {\n  \n  const [users, setUsers] = useState([]);\n\n  return (\n    <div className=\"container\">\n      <section className=\"hero is-dark\">\n        <div className=\"hero-body\">\n          <h1 className=\"title\">Hello</h1>\n        </div>\n      </section>\n      <br /><br />\n      <div className=\"columns\">\n        <div className=\"column is-half\">\n          <Form createUser={newUser => setUsers([...users, newUser])} />\n        </div>\n        <div className=\"column is-half\">\n          <List users={users} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}